{{ if .Values.mlflow.postgres.init }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "mlflow.fullname" . }}-init-db
  labels:
    {{- include "mlflow.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
    "helm.sh/hook-weight": "2"
spec:
  template:
    metadata:
      name: {{ include "mlflow.fullname" . }}-init-db
    spec:
      securityContext:
        runAsUser: 0
      containers:
      - name: {{ .Chart.Name }}-init-db
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        volumeMounts:
          - name: {{ include "mlflow.fullname" . }}
            mountPath: {{ .Values.mlflow.configMountPath | quote }}
            readOnly: true
        envFrom:
          - secretRef:
              name: {{ include "mlflow.fullname" . }}
        command:
        # TODO: check 'backstage' helm chart on how to setup postgres properly
          - psql
          - --command
          - "CREATE DATABASE {{ .Values.mlflow.postgres.database }}"
          - --command
          - "CREATE USER {{ required "Missing postgres username" .Values.mlflow.postgres.username }} WITH ENCRYPTED PASSWORD '{{ required "Missing postgres password" .Values.mlflow.postgres.password }}';"
          - --command
          - "GRANT ALL PRIVILEGES ON DATABASE {{ .Values.mlflow.postgres.database }} TO {{ required "Missing postgres password" .Values.mlflow.postgres.password }};"
      volumes:
        - name: {{ include "mlflow.fullname" . }}
          configMap:
            name: {{ include "mlflow.fullname" . }}
      restartPolicy: Never
{{ end }}
